/*
 * Final 24x8 LED Matrix Code
 * by Edward Ahn
 *
 */
 
// Arduino Pins
const int SER = 8;
const int LATCH = 9;
const int CLK = 10;

// Row Values
const int ROWS[] = {1, 2, 4, 8, 16, 32, 64, 128};

// Alphabet
const byte A[] = {B01110000, B10001000, B10001000, B10001000, B11111000, \
  B10001000, B10001000, B10001000};
const byte B[] = {B11110000, B10001000, B10001000, B11110000, B10001000, \
  B10001000, B10001000, B11110000};
const byte C[] = {B01110000, B10001000, B10000000, B10000000, B10000000, \
  B10000000, B10001000, B01110000};
const byte D[] = {B11110000, B10001000, B10001000, B10001000, B10001000, \
  B10001000, B10001000, B11110000};
const byte E[] = {B11111000, B10000000, B10000000, B11110000, B10000000, \
  B10000000, B10000000, B11111000};
const byte F[] = {B11111000, B10000000, B10000000, B11110000, B10000000, \
  B10000000, B10000000, B10000000};
const byte G[] = {B01110000, B10001000, B10000000, B10000000, B10111000, \
  B10001000, B10001000, B01110000};
const byte H[] = {B10001000, B10001000, B10001000, B11111000, B10001000, \
  B10001000, B10001000, B10001000};
const byte I[] = {B11111000, B00100000, B00100000, B00100000, B00100000, \
  B00100000, B00100000, B11111000};
const byte J[] = {B11111000, B00010000, B00010000, B00010000, B00010000, \
  B00010000, B10010000, B01100000};
const byte K[] = {B10001000, B10010000, B10100000, B11000000, B11000000, \
  B10100000, B10010000, B10001000};
const byte L[] = {B10000000, B10000000, B10000000, B10000000, B10000000, \
  B10000000, B10000000, B11111000};
const byte M[] = {B10001000, B10001000, B11011000, B10101000, B10001000, \
  B10001000, B10001000, B10001000, B10001000};
const byte N[] = {B10001000, B10001000, B11001000, B10101000, B10011000, \
  B10001000, B10001000, B10001000};
const byte O[] = {B01110000, B10001000, B10001000, B10001000, B10001000, \
  B10001000, B10001000, B01110000};
const byte P[] = {B11110000, B10001000, B10001000, B11110000, B10000000, \
  B10000000, B10000000, B10000000};
const byte Q[] = {B01110000, B10001000, B10001000, B10001000, B10001000, \
  B10101000, B10011000, B01110000};
const byte R[] = {B11110000, B10001000, B10001000, B11110000, B11000000, \
  B10100000, B10010000, B10001000};
const byte S[] = {B01110000, B10001000, B10000000, B01110000, B00001000, \
  B00001000, B10001000, B01110000};
const byte T[] = {B11111000, B00100000, B00100000, B00100000, B00100000, \
  B00100000, B00100000, B00100000};
const byte U[] = {B10001000, B10001000, B10001000, B10001000, B10001000, \
  B10001000, B10001000, B01110000};
const byte V[] = {B10001000, B10001000, B10001000, B10001000, B10001000, \
  B10001000, B01010000, B00100000};
const byte W[] = {B10001000, B10001000, B10001000, B10001000, B10101000, \
  B10101000, B10101000, B01010000};
const byte X[] = {B10001000, B10001000, B01010000, B00100000, B01010000, \
  B01010000, B10001000, B10001000};
const byte Y[] = {B10001000, B10001000, B01010000, B00100000, B00100000, \
  B00100000, B00100000, B00100000};
const byte Z[] = {B11111000, B00001000, B00010000, B00100000, B01000000, \
  B10000000, B10000000, B11111000};


void setup() {
  pinMode(SER, OUTPUT);
  pinMode(LATCH, OUTPUT);
  pinMode(CLK, OUTPUT);
  //Serial.begin(9600);
}

void loop() {
  for (int row = 0; row < 8; row++) {
    digitalWrite(LATCH, LOW);
    shiftOut(SER, CLK, LSBFIRST, B11111111);
    shiftOut(SER, CLK, LSBFIRST, B11111111);
    shiftOut(SER, CLK, LSBFIRST, ~Z[row]);
    shiftOut(SER, CLK, MSBFIRST, ROWS[row]);
    digitalWrite(LATCH, HIGH);
    delay(1);
  }
}
